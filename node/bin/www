#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('react-node-app:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3009');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require('socket.io')(server, {
    path: "/test",
    serveClient: false,

});
let socketIds = [];
io.on('connection', (socket) => {
    //=====================================建立连接====================================//
    socket.on('user_login', socketId => {
        if (!socketIds.some(item => item === socketId)) {
            socketIds.push(socketId);
            console.log(3333, socketIds)
        }
    })
    console.log(4444, socketIds)
    //=====================================接收到消息推送====================================//
    socket.on("news", (socketId,data) => {
        let socketid = null;
        socketIds.forEach(item => {
            if (item !== socketId) {
                socketid = item;
            }
        })
        io.sockets.to(socketid).emit('news', data);
    })
    //=====================================断开连接====================================//
    socket.on("disconnect", reason => {
        socketIds = socketIds.filter(item => item !== socket.id);
        console.log("reason", socket.id)
    })
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
